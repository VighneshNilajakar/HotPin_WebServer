#!/usr/bin/env python3
"""
HotPin Firmware Configuration Generator

This script reads configuration from a .env file and generates appropriate
firmware configuration files for the ESP-IDF build system.
"""

import os
import sys
import argparse
from pathlib import Path
from dotenv import dotenv_values

def validate_wifi_config(wifi_ssid, wifi_password):
    """Validate WiFi configuration parameters."""
    if wifi_ssid:
        if len(wifi_ssid) > 32:
            raise ValueError("WiFi SSID must be 32 characters or less")
        if wifi_password and len(wifi_password) > 64:
            raise ValueError("WiFi password must be 64 characters or less")
    return True

def generate_sdkconfig_local(env_vars, output_path):
    """Generate sdkconfig.local file from environment variables."""
    wifi_ssid = env_vars.get('WIFI_SSID', '')
    wifi_password = env_vars.get('WIFI_PASSWORD', '')
    
    # Validate WiFi configuration
    validate_wifi_config(wifi_ssid, wifi_password)
    
    # Generate sdkconfig.local content
    content = f"""# HotPin Firmware Configuration Generated from .env
# This file is automatically generated by config_generator.py
# Do not edit manually - edit .env instead

# WiFi Configuration
CONFIG_ESP_WIFI_SSID="{wifi_ssid}"
CONFIG_ESP_WIFI_PASSWORD="{wifi_password}"

# WebSocket Configuration
CONFIG_HOTPIN_WS_URL="{env_vars.get('WEBSOCKET_URL', 'ws://10.50.92.58:8000/ws')}"
CONFIG_HOTPIN_WS_TOKEN="{env_vars.get('WEBSOCKET_TOKEN', 'mysecrettoken123')}"

# Audio Configuration
CONFIG_CHUNK_SIZE_BYTES={env_vars.get('CHUNK_SIZE_BYTES', '16000')}
CONFIG_SAMPLE_RATE={env_vars.get('SAMPLE_RATE', '16000')}

# Camera Configuration
CONFIG_CAMERA_ENABLED={"y" if env_vars.get('CAMERA_ENABLED', 'true').lower() in ['true', '1', 'yes', 'y'] else "n"}

# Debug Configuration
CONFIG_LOG_LEVEL="{env_vars.get('LOG_LEVEL', 'INFO')}"
"""
    
    # Write to file
    with open(output_path, 'w') as f:
        f.write(content)
    
    print(f"Generated {output_path}")

def generate_config_h(env_vars, output_path):
    """Generate config.h file with configuration constants."""
    content = f"""/*
 * HotPin Firmware Configuration Constants
 * Automatically generated from .env file
 * Do not edit manually - edit .env instead
 */

#ifndef CONFIG_H
#define CONFIG_H

// WiFi Configuration
#define WIFI_SSID "{env_vars.get('WIFI_SSID', '')}"
#define WIFI_PASSWORD "{env_vars.get('WIFI_PASSWORD', '')}"

// WebSocket Configuration
#define WEBSOCKET_URL "{env_vars.get('WEBSOCKET_URL', 'ws://10.50.92.58:8000/ws')}"
#define WEBSOCKET_TOKEN "{env_vars.get('WEBSOCKET_TOKEN', 'mysecrettoken123')}"

// Audio Configuration
#define CHUNK_SIZE_BYTES {env_vars.get('CHUNK_SIZE_BYTES', '16000')}
#define SAMPLE_RATE {env_vars.get('SAMPLE_RATE', '16000')}

// Camera Configuration
#define CAMERA_ENABLED {"1" if env_vars.get('CAMERA_ENABLED', 'true').lower() in ['true', '1', 'yes', 'y'] else "0"}

// Debug Configuration
#define LOG_LEVEL "{env_vars.get('LOG_LEVEL', 'INFO')}"

#endif // CONFIG_H
"""
    
    # Write to file
    with open(output_path, 'w') as f:
        f.write(content)
    
    print(f"Generated {output_path}")

def main():
    """Main function to generate configuration files."""
    parser = argparse.ArgumentParser(description='Generate HotPin firmware configuration files from .env')
    parser.add_argument('--env', default='.env', help='Path to .env file')
    parser.add_argument('--sdkconfig', default='sdkconfig.local', help='Output path for sdkconfig.local')
    parser.add_argument('--config-h', default='main/config.h', help='Output path for config.h')
    
    args = parser.parse_args()
    
    # Check if .env file exists
    if not os.path.exists(args.env):
        print(f"Error: {args.env} file not found")
        print("Please copy .env.example to .env and configure your settings")
        sys.exit(1)
    
    # Load environment variables from .env file
    env_vars = dotenv_values(args.env)
    
    # Validate required parameters
    wifi_ssid = env_vars.get('WIFI_SSID', '')
    wifi_password = env_vars.get('WIFI_PASSWORD', '')
    
    if not wifi_ssid:
        print("Warning: WIFI_SSID is not set in .env")
        print("The device will not connect to WiFi - set this for network connectivity")
    
    # Generate configuration files
    try:
        generate_sdkconfig_local(env_vars, args.sdkconfig)
        generate_config_h(env_vars, args.config_h)
        print("Configuration files generated successfully!")
    except Exception as e:
        print(f"Error generating configuration files: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()